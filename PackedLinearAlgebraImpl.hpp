#ifndef ZSVM_PACKED_LINEAR_ALGEBRA_IMPL_HPP
#define ZSVM_PACKED_LINEAR_ALGEBRA_IMPL_HPP

#include "Restrict.hpp"

template <typename T>
T packed_determinant_inverse_1(
        const T *RESTRICT x, T *RESTRICT y) noexcept {
    const T det = x[0];
    y[0] = 1 / det;
    return det;
}

template <typename T>
T packed_kinetic_trace_1(
        const T *RESTRICT a, const T *RESTRICT b,
        const T *RESTRICT c, const T *RESTRICT m) noexcept {
    return a[0] * b[0] * c[0] * m[0];
}

template <typename T>
T packed_quadratic_form_1(
        const T *RESTRICT x, const T *RESTRICT v) noexcept {
    return v[0] * v[0] * x[0];
}

template <typename T>
void packed_permutation_conjugate_1(
        const T *RESTRICT x, const T *RESTRICT p,
        T *RESTRICT y) noexcept {
    y[0] = p[0] * p[0] * x[0];
}

template <typename T>
T packed_determinant_inverse_2(
        const T *RESTRICT x, T *RESTRICT y) noexcept {
    const T det =
            -x[1] * x[1]
            + x[0] * x[2];
    y[0] = (x[2]) / det;
    y[1] = (-1 * x[1]) / det;
    y[2] = (x[0]) / det;
    return det;
}

template <typename T>
T packed_kinetic_trace_2(
        const T *RESTRICT a, const T *RESTRICT b,
        const T *RESTRICT c, const T *RESTRICT m) noexcept {
    return a[0] * b[0] * c[0] * m[0]
           + a[1] * b[0] * c[1] * m[0]
           + a[0] * b[1] * c[1] * m[0]
           + a[1] * b[1] * c[2] * m[0]
           + a[1] * b[1] * c[0] * m[1]
           + a[2] * b[1] * c[1] * m[1]
           + a[1] * b[2] * c[1] * m[1]
           + a[2] * b[2] * c[2] * m[1];
}

template <typename T>
T packed_quadratic_form_2(
        const T *RESTRICT x, const T *RESTRICT v) noexcept {
    return v[0] * v[0] * x[0]
           + 2 * v[0] * v[1] * x[1]
           + v[1] * v[1] * x[2];
}

template <typename T>
void packed_permutation_conjugate_2(
        const T *RESTRICT x, const T *RESTRICT p,
        T *RESTRICT y) noexcept {
    y[0] = p[0] * p[0] * x[0]
           + 2 * p[0] * p[1] * x[1]
           + p[1] * p[1] * x[2];
    y[1] = p[0] * p[2] * x[0]
           + p[1] * p[2] * x[1]
           + p[0] * p[3] * x[1]
           + p[1] * p[3] * x[2];
    y[2] = p[2] * p[2] * x[0]
           + 2 * p[2] * p[3] * x[1]
           + p[3] * p[3] * x[2];
}

template <typename T>
T packed_determinant_inverse_3(
        const T *RESTRICT x, T *RESTRICT y) noexcept {
    const T det =
            -x[2] * x[3] * x[3]
            + 2 * x[1] * x[3] * x[4]
            - x[0] * x[4] * x[4]
            - x[1] * x[1] * x[5]
            + x[0] * x[2] * x[5];
    y[0] = (-x[4] * x[4]
            + x[2] * x[5]) / det;
    y[1] = (x[3] * x[4]
            - x[1] * x[5]) / det;
    y[2] = (-x[3] * x[3]
            + x[0] * x[5]) / det;
    y[3] = (-x[2] * x[3]
            + x[1] * x[4]) / det;
    y[4] = (x[1] * x[3]
            - x[0] * x[4]) / det;
    y[5] = (-x[1] * x[1]
            + x[0] * x[2]) / det;
    return det;
}

template <typename T>
T packed_kinetic_trace_3(
        const T *RESTRICT a, const T *RESTRICT b,
        const T *RESTRICT c, const T *RESTRICT m) noexcept {
    return a[0] * b[0] * c[0] * m[0]
           + a[1] * b[0] * c[1] * m[0]
           + a[0] * b[1] * c[1] * m[0]
           + a[1] * b[1] * c[2] * m[0]
           + a[3] * b[0] * c[3] * m[0]
           + a[0] * b[3] * c[3] * m[0]
           + a[3] * b[1] * c[4] * m[0]
           + a[1] * b[3] * c[4] * m[0]
           + a[3] * b[3] * c[5] * m[0]
           + a[1] * b[1] * c[0] * m[1]
           + a[2] * b[1] * c[1] * m[1]
           + a[1] * b[2] * c[1] * m[1]
           + a[2] * b[2] * c[2] * m[1]
           + a[4] * b[1] * c[3] * m[1]
           + a[1] * b[4] * c[3] * m[1]
           + a[4] * b[2] * c[4] * m[1]
           + a[2] * b[4] * c[4] * m[1]
           + a[4] * b[4] * c[5] * m[1]
           + a[3] * b[3] * c[0] * m[2]
           + a[4] * b[3] * c[1] * m[2]
           + a[3] * b[4] * c[1] * m[2]
           + a[4] * b[4] * c[2] * m[2]
           + a[5] * b[3] * c[3] * m[2]
           + a[3] * b[5] * c[3] * m[2]
           + a[5] * b[4] * c[4] * m[2]
           + a[4] * b[5] * c[4] * m[2]
           + a[5] * b[5] * c[5] * m[2];
}

template <typename T>
T packed_quadratic_form_3(
        const T *RESTRICT x, const T *RESTRICT v) noexcept {
    return v[0] * v[0] * x[0]
           + 2 * v[0] * v[1] * x[1]
           + v[1] * v[1] * x[2]
           + 2 * v[0] * v[2] * x[3]
           + 2 * v[1] * v[2] * x[4]
           + v[2] * v[2] * x[5];
}

template <typename T>
void packed_permutation_conjugate_3(
        const T *RESTRICT x, const T *RESTRICT p,
        T *RESTRICT y) noexcept {
    y[0] = p[0] * p[0] * x[0]
           + 2 * p[0] * p[1] * x[1]
           + p[1] * p[1] * x[2]
           + 2 * p[0] * p[2] * x[3]
           + 2 * p[1] * p[2] * x[4]
           + p[2] * p[2] * x[5];
    y[1] = p[0] * p[3] * x[0]
           + p[1] * p[3] * x[1]
           + p[0] * p[4] * x[1]
           + p[1] * p[4] * x[2]
           + p[2] * p[3] * x[3]
           + p[0] * p[5] * x[3]
           + p[2] * p[4] * x[4]
           + p[1] * p[5] * x[4]
           + p[2] * p[5] * x[5];
    y[2] = p[3] * p[3] * x[0]
           + 2 * p[3] * p[4] * x[1]
           + p[4] * p[4] * x[2]
           + 2 * p[3] * p[5] * x[3]
           + 2 * p[4] * p[5] * x[4]
           + p[5] * p[5] * x[5];
    y[3] = p[0] * p[6] * x[0]
           + p[1] * p[6] * x[1]
           + p[0] * p[7] * x[1]
           + p[1] * p[7] * x[2]
           + p[2] * p[6] * x[3]
           + p[0] * p[8] * x[3]
           + p[2] * p[7] * x[4]
           + p[1] * p[8] * x[4]
           + p[2] * p[8] * x[5];
    y[4] = p[3] * p[6] * x[0]
           + p[4] * p[6] * x[1]
           + p[3] * p[7] * x[1]
           + p[4] * p[7] * x[2]
           + p[5] * p[6] * x[3]
           + p[3] * p[8] * x[3]
           + p[5] * p[7] * x[4]
           + p[4] * p[8] * x[4]
           + p[5] * p[8] * x[5];
    y[5] = p[6] * p[6] * x[0]
           + 2 * p[6] * p[7] * x[1]
           + p[7] * p[7] * x[2]
           + 2 * p[6] * p[8] * x[3]
           + 2 * p[7] * p[8] * x[4]
           + p[8] * p[8] * x[5];
}

template <typename T>
T packed_determinant_inverse_4(
        const T *RESTRICT x, T *RESTRICT y) noexcept {
    const T det =
            x[4] * x[4] * x[6] * x[6]
            - x[2] * x[5] * x[6] * x[6]
            - 2 * x[3] * x[4] * x[6] * x[7]
            + 2 * x[1] * x[5] * x[6] * x[7]
            + x[3] * x[3] * x[7] * x[7]
            - x[0] * x[5] * x[7] * x[7]
            + 2 * x[2] * x[3] * x[6] * x[8]
            - 2 * x[1] * x[4] * x[6] * x[8]
            - 2 * x[1] * x[3] * x[7] * x[8]
            + 2 * x[0] * x[4] * x[7] * x[8]
            + x[1] * x[1] * x[8] * x[8]
            - x[0] * x[2] * x[8] * x[8]
            - x[2] * x[3] * x[3] * x[9]
            + 2 * x[1] * x[3] * x[4] * x[9]
            - x[0] * x[4] * x[4] * x[9]
            - x[1] * x[1] * x[5] * x[9]
            + x[0] * x[2] * x[5] * x[9];
    y[0] = (-x[5] * x[7] * x[7]
            + 2 * x[4] * x[7] * x[8]
            - x[2] * x[8] * x[8]
            - x[4] * x[4] * x[9]
            + x[2] * x[5] * x[9]) / det;
    y[1] = (x[5] * x[6] * x[7]
            - x[4] * x[6] * x[8]
            - x[3] * x[7] * x[8]
            + x[1] * x[8] * x[8]
            + x[3] * x[4] * x[9]
            - x[1] * x[5] * x[9]) / det;
    y[2] = (-x[5] * x[6] * x[6]
            + 2 * x[3] * x[6] * x[8]
            - x[0] * x[8] * x[8]
            - x[3] * x[3] * x[9]
            + x[0] * x[5] * x[9]) / det;
    y[3] = (-x[4] * x[6] * x[7]
            + x[3] * x[7] * x[7]
            + x[2] * x[6] * x[8]
            - x[1] * x[7] * x[8]
            - x[2] * x[3] * x[9]
            + x[1] * x[4] * x[9]) / det;
    y[4] = (x[4] * x[6] * x[6]
            - x[3] * x[6] * x[7]
            - x[1] * x[6] * x[8]
            + x[0] * x[7] * x[8]
            + x[1] * x[3] * x[9]
            - x[0] * x[4] * x[9]) / det;
    y[5] = (-x[2] * x[6] * x[6]
            + 2 * x[1] * x[6] * x[7]
            - x[0] * x[7] * x[7]
            - x[1] * x[1] * x[9]
            + x[0] * x[2] * x[9]) / det;
    y[6] = (x[4] * x[4] * x[6]
            - x[2] * x[5] * x[6]
            - x[3] * x[4] * x[7]
            + x[1] * x[5] * x[7]
            + x[2] * x[3] * x[8]
            - x[1] * x[4] * x[8]) / det;
    y[7] = (-x[3] * x[4] * x[6]
            + x[1] * x[5] * x[6]
            + x[3] * x[3] * x[7]
            - x[0] * x[5] * x[7]
            - x[1] * x[3] * x[8]
            + x[0] * x[4] * x[8]) / det;
    y[8] = (x[2] * x[3] * x[6]
            - x[1] * x[4] * x[6]
            - x[1] * x[3] * x[7]
            + x[0] * x[4] * x[7]
            + x[1] * x[1] * x[8]
            - x[0] * x[2] * x[8]) / det;
    y[9] = (-x[2] * x[3] * x[3]
            + 2 * x[1] * x[3] * x[4]
            - x[0] * x[4] * x[4]
            - x[1] * x[1] * x[5]
            + x[0] * x[2] * x[5]) / det;
    return det;
}

template <typename T>
T packed_kinetic_trace_4(
        const T *RESTRICT a, const T *RESTRICT b,
        const T *RESTRICT c, const T *RESTRICT m) noexcept {
    return a[0] * b[0] * c[0] * m[0]
           + a[1] * b[0] * c[1] * m[0]
           + a[0] * b[1] * c[1] * m[0]
           + a[1] * b[1] * c[2] * m[0]
           + a[3] * b[0] * c[3] * m[0]
           + a[0] * b[3] * c[3] * m[0]
           + a[3] * b[1] * c[4] * m[0]
           + a[1] * b[3] * c[4] * m[0]
           + a[3] * b[3] * c[5] * m[0]
           + a[6] * b[0] * c[6] * m[0]
           + a[0] * b[6] * c[6] * m[0]
           + a[6] * b[1] * c[7] * m[0]
           + a[1] * b[6] * c[7] * m[0]
           + a[6] * b[3] * c[8] * m[0]
           + a[3] * b[6] * c[8] * m[0]
           + a[6] * b[6] * c[9] * m[0]
           + a[1] * b[1] * c[0] * m[1]
           + a[2] * b[1] * c[1] * m[1]
           + a[1] * b[2] * c[1] * m[1]
           + a[2] * b[2] * c[2] * m[1]
           + a[4] * b[1] * c[3] * m[1]
           + a[1] * b[4] * c[3] * m[1]
           + a[4] * b[2] * c[4] * m[1]
           + a[2] * b[4] * c[4] * m[1]
           + a[4] * b[4] * c[5] * m[1]
           + a[7] * b[1] * c[6] * m[1]
           + a[1] * b[7] * c[6] * m[1]
           + a[7] * b[2] * c[7] * m[1]
           + a[2] * b[7] * c[7] * m[1]
           + a[7] * b[4] * c[8] * m[1]
           + a[4] * b[7] * c[8] * m[1]
           + a[7] * b[7] * c[9] * m[1]
           + a[3] * b[3] * c[0] * m[2]
           + a[4] * b[3] * c[1] * m[2]
           + a[3] * b[4] * c[1] * m[2]
           + a[4] * b[4] * c[2] * m[2]
           + a[5] * b[3] * c[3] * m[2]
           + a[3] * b[5] * c[3] * m[2]
           + a[5] * b[4] * c[4] * m[2]
           + a[4] * b[5] * c[4] * m[2]
           + a[5] * b[5] * c[5] * m[2]
           + a[8] * b[3] * c[6] * m[2]
           + a[3] * b[8] * c[6] * m[2]
           + a[8] * b[4] * c[7] * m[2]
           + a[4] * b[8] * c[7] * m[2]
           + a[8] * b[5] * c[8] * m[2]
           + a[5] * b[8] * c[8] * m[2]
           + a[8] * b[8] * c[9] * m[2]
           + a[6] * b[6] * c[0] * m[3]
           + a[7] * b[6] * c[1] * m[3]
           + a[6] * b[7] * c[1] * m[3]
           + a[7] * b[7] * c[2] * m[3]
           + a[8] * b[6] * c[3] * m[3]
           + a[6] * b[8] * c[3] * m[3]
           + a[8] * b[7] * c[4] * m[3]
           + a[7] * b[8] * c[4] * m[3]
           + a[8] * b[8] * c[5] * m[3]
           + a[9] * b[6] * c[6] * m[3]
           + a[6] * b[9] * c[6] * m[3]
           + a[9] * b[7] * c[7] * m[3]
           + a[7] * b[9] * c[7] * m[3]
           + a[9] * b[8] * c[8] * m[3]
           + a[8] * b[9] * c[8] * m[3]
           + a[9] * b[9] * c[9] * m[3];
}

template <typename T>
T packed_quadratic_form_4(
        const T *RESTRICT x, const T *RESTRICT v) noexcept {
    return v[0] * v[0] * x[0]
           + 2 * v[0] * v[1] * x[1]
           + v[1] * v[1] * x[2]
           + 2 * v[0] * v[2] * x[3]
           + 2 * v[1] * v[2] * x[4]
           + v[2] * v[2] * x[5]
           + 2 * v[0] * v[3] * x[6]
           + 2 * v[1] * v[3] * x[7]
           + 2 * v[2] * v[3] * x[8]
           + v[3] * v[3] * x[9];
}

template <typename T>
void packed_permutation_conjugate_4(
        const T *RESTRICT x, const T *RESTRICT p,
        T *RESTRICT y) noexcept {
    y[0] = p[0] * p[0] * x[0]
           + 2 * p[0] * p[1] * x[1]
           + p[1] * p[1] * x[2]
           + 2 * p[0] * p[2] * x[3]
           + 2 * p[1] * p[2] * x[4]
           + p[2] * p[2] * x[5]
           + 2 * p[0] * p[3] * x[6]
           + 2 * p[1] * p[3] * x[7]
           + 2 * p[2] * p[3] * x[8]
           + p[3] * p[3] * x[9];
    y[1] = p[0] * p[4] * x[0]
           + p[1] * p[4] * x[1]
           + p[0] * p[5] * x[1]
           + p[1] * p[5] * x[2]
           + p[2] * p[4] * x[3]
           + p[0] * p[6] * x[3]
           + p[2] * p[5] * x[4]
           + p[1] * p[6] * x[4]
           + p[2] * p[6] * x[5]
           + p[3] * p[4] * x[6]
           + p[0] * p[7] * x[6]
           + p[3] * p[5] * x[7]
           + p[1] * p[7] * x[7]
           + p[3] * p[6] * x[8]
           + p[2] * p[7] * x[8]
           + p[3] * p[7] * x[9];
    y[2] = p[4] * p[4] * x[0]
           + 2 * p[4] * p[5] * x[1]
           + p[5] * p[5] * x[2]
           + 2 * p[4] * p[6] * x[3]
           + 2 * p[5] * p[6] * x[4]
           + p[6] * p[6] * x[5]
           + 2 * p[4] * p[7] * x[6]
           + 2 * p[5] * p[7] * x[7]
           + 2 * p[6] * p[7] * x[8]
           + p[7] * p[7] * x[9];
    y[3] = p[0] * p[8] * x[0]
           + p[1] * p[8] * x[1]
           + p[0] * p[9] * x[1]
           + p[1] * p[9] * x[2]
           + p[2] * p[8] * x[3]
           + p[0] * p[10] * x[3]
           + p[2] * p[9] * x[4]
           + p[1] * p[10] * x[4]
           + p[2] * p[10] * x[5]
           + p[3] * p[8] * x[6]
           + p[0] * p[11] * x[6]
           + p[3] * p[9] * x[7]
           + p[1] * p[11] * x[7]
           + p[3] * p[10] * x[8]
           + p[2] * p[11] * x[8]
           + p[3] * p[11] * x[9];
    y[4] = p[4] * p[8] * x[0]
           + p[5] * p[8] * x[1]
           + p[4] * p[9] * x[1]
           + p[5] * p[9] * x[2]
           + p[6] * p[8] * x[3]
           + p[4] * p[10] * x[3]
           + p[6] * p[9] * x[4]
           + p[5] * p[10] * x[4]
           + p[6] * p[10] * x[5]
           + p[7] * p[8] * x[6]
           + p[4] * p[11] * x[6]
           + p[7] * p[9] * x[7]
           + p[5] * p[11] * x[7]
           + p[7] * p[10] * x[8]
           + p[6] * p[11] * x[8]
           + p[7] * p[11] * x[9];
    y[5] = p[8] * p[8] * x[0]
           + 2 * p[8] * p[9] * x[1]
           + p[9] * p[9] * x[2]
           + 2 * p[8] * p[10] * x[3]
           + 2 * p[9] * p[10] * x[4]
           + p[10] * p[10] * x[5]
           + 2 * p[8] * p[11] * x[6]
           + 2 * p[9] * p[11] * x[7]
           + 2 * p[10] * p[11] * x[8]
           + p[11] * p[11] * x[9];
    y[6] = p[0] * p[12] * x[0]
           + p[1] * p[12] * x[1]
           + p[0] * p[13] * x[1]
           + p[1] * p[13] * x[2]
           + p[2] * p[12] * x[3]
           + p[0] * p[14] * x[3]
           + p[2] * p[13] * x[4]
           + p[1] * p[14] * x[4]
           + p[2] * p[14] * x[5]
           + p[3] * p[12] * x[6]
           + p[0] * p[15] * x[6]
           + p[3] * p[13] * x[7]
           + p[1] * p[15] * x[7]
           + p[3] * p[14] * x[8]
           + p[2] * p[15] * x[8]
           + p[3] * p[15] * x[9];
    y[7] = p[4] * p[12] * x[0]
           + p[5] * p[12] * x[1]
           + p[4] * p[13] * x[1]
           + p[5] * p[13] * x[2]
           + p[6] * p[12] * x[3]
           + p[4] * p[14] * x[3]
           + p[6] * p[13] * x[4]
           + p[5] * p[14] * x[4]
           + p[6] * p[14] * x[5]
           + p[7] * p[12] * x[6]
           + p[4] * p[15] * x[6]
           + p[7] * p[13] * x[7]
           + p[5] * p[15] * x[7]
           + p[7] * p[14] * x[8]
           + p[6] * p[15] * x[8]
           + p[7] * p[15] * x[9];
    y[8] = p[8] * p[12] * x[0]
           + p[9] * p[12] * x[1]
           + p[8] * p[13] * x[1]
           + p[9] * p[13] * x[2]
           + p[10] * p[12] * x[3]
           + p[8] * p[14] * x[3]
           + p[10] * p[13] * x[4]
           + p[9] * p[14] * x[4]
           + p[10] * p[14] * x[5]
           + p[11] * p[12] * x[6]
           + p[8] * p[15] * x[6]
           + p[11] * p[13] * x[7]
           + p[9] * p[15] * x[7]
           + p[11] * p[14] * x[8]
           + p[10] * p[15] * x[8]
           + p[11] * p[15] * x[9];
    y[9] = p[12] * p[12] * x[0]
           + 2 * p[12] * p[13] * x[1]
           + p[13] * p[13] * x[2]
           + 2 * p[12] * p[14] * x[3]
           + 2 * p[13] * p[14] * x[4]
           + p[14] * p[14] * x[5]
           + 2 * p[12] * p[15] * x[6]
           + 2 * p[13] * p[15] * x[7]
           + 2 * p[14] * p[15] * x[8]
           + p[15] * p[15] * x[9];
}

template <typename T>
T packed_determinant_inverse_5(
        const T *RESTRICT x, T *RESTRICT y) noexcept {
    const T det =
            x[5] * x[7] * x[7] * x[10] * x[10]
            - 2 * x[4] * x[7] * x[8] * x[10] * x[10]
            + x[2] * x[8] * x[8] * x[10] * x[10]
            + x[4] * x[4] * x[9] * x[10] * x[10]
            - x[2] * x[5] * x[9] * x[10] * x[10]
            - 2 * x[5] * x[6] * x[7] * x[10] * x[11]
            + 2 * x[4] * x[6] * x[8] * x[10] * x[11]
            + 2 * x[3] * x[7] * x[8] * x[10] * x[11]
            - 2 * x[1] * x[8] * x[8] * x[10] * x[11]
            - 2 * x[3] * x[4] * x[9] * x[10] * x[11]
            + 2 * x[1] * x[5] * x[9] * x[10] * x[11]
            + x[5] * x[6] * x[6] * x[11] * x[11]
            - 2 * x[3] * x[6] * x[8] * x[11] * x[11]
            + x[0] * x[8] * x[8] * x[11] * x[11]
            + x[3] * x[3] * x[9] * x[11] * x[11]
            - x[0] * x[5] * x[9] * x[11] * x[11]
            + 2 * x[4] * x[6] * x[7] * x[10] * x[12]
            - 2 * x[3] * x[7] * x[7] * x[10] * x[12]
            - 2 * x[2] * x[6] * x[8] * x[10] * x[12]
            + 2 * x[1] * x[7] * x[8] * x[10] * x[12]
            + 2 * x[2] * x[3] * x[9] * x[10] * x[12]
            - 2 * x[1] * x[4] * x[9] * x[10] * x[12]
            - 2 * x[4] * x[6] * x[6] * x[11] * x[12]
            + 2 * x[3] * x[6] * x[7] * x[11] * x[12]
            + 2 * x[1] * x[6] * x[8] * x[11] * x[12]
            - 2 * x[0] * x[7] * x[8] * x[11] * x[12]
            - 2 * x[1] * x[3] * x[9] * x[11] * x[12]
            + 2 * x[0] * x[4] * x[9] * x[11] * x[12]
            + x[2] * x[6] * x[6] * x[12] * x[12]
            - 2 * x[1] * x[6] * x[7] * x[12] * x[12]
            + x[0] * x[7] * x[7] * x[12] * x[12]
            + x[1] * x[1] * x[9] * x[12] * x[12]
            - x[0] * x[2] * x[9] * x[12] * x[12]
            - 2 * x[4] * x[4] * x[6] * x[10] * x[13]
            + 2 * x[2] * x[5] * x[6] * x[10] * x[13]
            + 2 * x[3] * x[4] * x[7] * x[10] * x[13]
            - 2 * x[1] * x[5] * x[7] * x[10] * x[13]
            - 2 * x[2] * x[3] * x[8] * x[10] * x[13]
            + 2 * x[1] * x[4] * x[8] * x[10] * x[13]
            + 2 * x[3] * x[4] * x[6] * x[11] * x[13]
            - 2 * x[1] * x[5] * x[6] * x[11] * x[13]
            - 2 * x[3] * x[3] * x[7] * x[11] * x[13]
            + 2 * x[0] * x[5] * x[7] * x[11] * x[13]
            + 2 * x[1] * x[3] * x[8] * x[11] * x[13]
            - 2 * x[0] * x[4] * x[8] * x[11] * x[13]
            - 2 * x[2] * x[3] * x[6] * x[12] * x[13]
            + 2 * x[1] * x[4] * x[6] * x[12] * x[13]
            + 2 * x[1] * x[3] * x[7] * x[12] * x[13]
            - 2 * x[0] * x[4] * x[7] * x[12] * x[13]
            - 2 * x[1] * x[1] * x[8] * x[12] * x[13]
            + 2 * x[0] * x[2] * x[8] * x[12] * x[13]
            + x[2] * x[3] * x[3] * x[13] * x[13]
            - 2 * x[1] * x[3] * x[4] * x[13] * x[13]
            + x[0] * x[4] * x[4] * x[13] * x[13]
            + x[1] * x[1] * x[5] * x[13] * x[13]
            - x[0] * x[2] * x[5] * x[13] * x[13]
            + x[4] * x[4] * x[6] * x[6] * x[14]
            - x[2] * x[5] * x[6] * x[6] * x[14]
            - 2 * x[3] * x[4] * x[6] * x[7] * x[14]
            + 2 * x[1] * x[5] * x[6] * x[7] * x[14]
            + x[3] * x[3] * x[7] * x[7] * x[14]
            - x[0] * x[5] * x[7] * x[7] * x[14]
            + 2 * x[2] * x[3] * x[6] * x[8] * x[14]
            - 2 * x[1] * x[4] * x[6] * x[8] * x[14]
            - 2 * x[1] * x[3] * x[7] * x[8] * x[14]
            + 2 * x[0] * x[4] * x[7] * x[8] * x[14]
            + x[1] * x[1] * x[8] * x[8] * x[14]
            - x[0] * x[2] * x[8] * x[8] * x[14]
            - x[2] * x[3] * x[3] * x[9] * x[14]
            + 2 * x[1] * x[3] * x[4] * x[9] * x[14]
            - x[0] * x[4] * x[4] * x[9] * x[14]
            - x[1] * x[1] * x[5] * x[9] * x[14]
            + x[0] * x[2] * x[5] * x[9] * x[14];
    y[0] = (x[8] * x[8] * x[11] * x[11]
            - x[5] * x[9] * x[11] * x[11]
            - 2 * x[7] * x[8] * x[11] * x[12]
            + 2 * x[4] * x[9] * x[11] * x[12]
            + x[7] * x[7] * x[12] * x[12]
            - x[2] * x[9] * x[12] * x[12]
            + 2 * x[5] * x[7] * x[11] * x[13]
            - 2 * x[4] * x[8] * x[11] * x[13]
            - 2 * x[4] * x[7] * x[12] * x[13]
            + 2 * x[2] * x[8] * x[12] * x[13]
            + x[4] * x[4] * x[13] * x[13]
            - x[2] * x[5] * x[13] * x[13]
            - x[5] * x[7] * x[7] * x[14]
            + 2 * x[4] * x[7] * x[8] * x[14]
            - x[2] * x[8] * x[8] * x[14]
            - x[4] * x[4] * x[9] * x[14]
            + x[2] * x[5] * x[9] * x[14]) / det;
    y[1] = (-x[8] * x[8] * x[10] * x[11]
            + x[5] * x[9] * x[10] * x[11]
            + x[7] * x[8] * x[10] * x[12]
            - x[4] * x[9] * x[10] * x[12]
            + x[6] * x[8] * x[11] * x[12]
            - x[3] * x[9] * x[11] * x[12]
            - x[6] * x[7] * x[12] * x[12]
            + x[1] * x[9] * x[12] * x[12]
            - x[5] * x[7] * x[10] * x[13]
            + x[4] * x[8] * x[10] * x[13]
            - x[5] * x[6] * x[11] * x[13]
            + x[3] * x[8] * x[11] * x[13]
            + x[4] * x[6] * x[12] * x[13]
            + x[3] * x[7] * x[12] * x[13]
            - 2 * x[1] * x[8] * x[12] * x[13]
            - x[3] * x[4] * x[13] * x[13]
            + x[1] * x[5] * x[13] * x[13]
            + x[5] * x[6] * x[7] * x[14]
            - x[4] * x[6] * x[8] * x[14]
            - x[3] * x[7] * x[8] * x[14]
            + x[1] * x[8] * x[8] * x[14]
            + x[3] * x[4] * x[9] * x[14]
            - x[1] * x[5] * x[9] * x[14]) / det;
    y[2] = (x[8] * x[8] * x[10] * x[10]
            - x[5] * x[9] * x[10] * x[10]
            - 2 * x[6] * x[8] * x[10] * x[12]
            + 2 * x[3] * x[9] * x[10] * x[12]
            + x[6] * x[6] * x[12] * x[12]
            - x[0] * x[9] * x[12] * x[12]
            + 2 * x[5] * x[6] * x[10] * x[13]
            - 2 * x[3] * x[8] * x[10] * x[13]
            - 2 * x[3] * x[6] * x[12] * x[13]
            + 2 * x[0] * x[8] * x[12] * x[13]
            + x[3] * x[3] * x[13] * x[13]
            - x[0] * x[5] * x[13] * x[13]
            - x[5] * x[6] * x[6] * x[14]
            + 2 * x[3] * x[6] * x[8] * x[14]
            - x[0] * x[8] * x[8] * x[14]
            - x[3] * x[3] * x[9] * x[14]
            + x[0] * x[5] * x[9] * x[14]) / det;
    y[3] = (x[7] * x[8] * x[10] * x[11]
            - x[4] * x[9] * x[10] * x[11]
            - x[6] * x[8] * x[11] * x[11]
            + x[3] * x[9] * x[11] * x[11]
            - x[7] * x[7] * x[10] * x[12]
            + x[2] * x[9] * x[10] * x[12]
            + x[6] * x[7] * x[11] * x[12]
            - x[1] * x[9] * x[11] * x[12]
            + x[4] * x[7] * x[10] * x[13]
            - x[2] * x[8] * x[10] * x[13]
            + x[4] * x[6] * x[11] * x[13]
            - 2 * x[3] * x[7] * x[11] * x[13]
            + x[1] * x[8] * x[11] * x[13]
            - x[2] * x[6] * x[12] * x[13]
            + x[1] * x[7] * x[12] * x[13]
            + x[2] * x[3] * x[13] * x[13]
            - x[1] * x[4] * x[13] * x[13]
            - x[4] * x[6] * x[7] * x[14]
            + x[3] * x[7] * x[7] * x[14]
            + x[2] * x[6] * x[8] * x[14]
            - x[1] * x[7] * x[8] * x[14]
            - x[2] * x[3] * x[9] * x[14]
            + x[1] * x[4] * x[9] * x[14]) / det;
    y[4] = (-x[7] * x[8] * x[10] * x[10]
            + x[4] * x[9] * x[10] * x[10]
            + x[6] * x[8] * x[10] * x[11]
            - x[3] * x[9] * x[10] * x[11]
            + x[6] * x[7] * x[10] * x[12]
            - x[1] * x[9] * x[10] * x[12]
            - x[6] * x[6] * x[11] * x[12]
            + x[0] * x[9] * x[11] * x[12]
            - 2 * x[4] * x[6] * x[10] * x[13]
            + x[3] * x[7] * x[10] * x[13]
            + x[1] * x[8] * x[10] * x[13]
            + x[3] * x[6] * x[11] * x[13]
            - x[0] * x[8] * x[11] * x[13]
            + x[1] * x[6] * x[12] * x[13]
            - x[0] * x[7] * x[12] * x[13]
            - x[1] * x[3] * x[13] * x[13]
            + x[0] * x[4] * x[13] * x[13]
            + x[4] * x[6] * x[6] * x[14]
            - x[3] * x[6] * x[7] * x[14]
            - x[1] * x[6] * x[8] * x[14]
            + x[0] * x[7] * x[8] * x[14]
            + x[1] * x[3] * x[9] * x[14]
            - x[0] * x[4] * x[9] * x[14]) / det;
    y[5] = (x[7] * x[7] * x[10] * x[10]
            - x[2] * x[9] * x[10] * x[10]
            - 2 * x[6] * x[7] * x[10] * x[11]
            + 2 * x[1] * x[9] * x[10] * x[11]
            + x[6] * x[6] * x[11] * x[11]
            - x[0] * x[9] * x[11] * x[11]
            + 2 * x[2] * x[6] * x[10] * x[13]
            - 2 * x[1] * x[7] * x[10] * x[13]
            - 2 * x[1] * x[6] * x[11] * x[13]
            + 2 * x[0] * x[7] * x[11] * x[13]
            + x[1] * x[1] * x[13] * x[13]
            - x[0] * x[2] * x[13] * x[13]
            - x[2] * x[6] * x[6] * x[14]
            + 2 * x[1] * x[6] * x[7] * x[14]
            - x[0] * x[7] * x[7] * x[14]
            - x[1] * x[1] * x[9] * x[14]
            + x[0] * x[2] * x[9] * x[14]) / det;
    y[6] = (-x[5] * x[7] * x[10] * x[11]
            + x[4] * x[8] * x[10] * x[11]
            + x[5] * x[6] * x[11] * x[11]
            - x[3] * x[8] * x[11] * x[11]
            + x[4] * x[7] * x[10] * x[12]
            - x[2] * x[8] * x[10] * x[12]
            - 2 * x[4] * x[6] * x[11] * x[12]
            + x[3] * x[7] * x[11] * x[12]
            + x[1] * x[8] * x[11] * x[12]
            + x[2] * x[6] * x[12] * x[12]
            - x[1] * x[7] * x[12] * x[12]
            - x[4] * x[4] * x[10] * x[13]
            + x[2] * x[5] * x[10] * x[13]
            + x[3] * x[4] * x[11] * x[13]
            - x[1] * x[5] * x[11] * x[13]
            - x[2] * x[3] * x[12] * x[13]
            + x[1] * x[4] * x[12] * x[13]
            + x[4] * x[4] * x[6] * x[14]
            - x[2] * x[5] * x[6] * x[14]
            - x[3] * x[4] * x[7] * x[14]
            + x[1] * x[5] * x[7] * x[14]
            + x[2] * x[3] * x[8] * x[14]
            - x[1] * x[4] * x[8] * x[14]) / det;
    y[7] = (x[5] * x[7] * x[10] * x[10]
            - x[4] * x[8] * x[10] * x[10]
            - x[5] * x[6] * x[10] * x[11]
            + x[3] * x[8] * x[10] * x[11]
            + x[4] * x[6] * x[10] * x[12]
            - 2 * x[3] * x[7] * x[10] * x[12]
            + x[1] * x[8] * x[10] * x[12]
            + x[3] * x[6] * x[11] * x[12]
            - x[0] * x[8] * x[11] * x[12]
            - x[1] * x[6] * x[12] * x[12]
            + x[0] * x[7] * x[12] * x[12]
            + x[3] * x[4] * x[10] * x[13]
            - x[1] * x[5] * x[10] * x[13]
            - x[3] * x[3] * x[11] * x[13]
            + x[0] * x[5] * x[11] * x[13]
            + x[1] * x[3] * x[12] * x[13]
            - x[0] * x[4] * x[12] * x[13]
            - x[3] * x[4] * x[6] * x[14]
            + x[1] * x[5] * x[6] * x[14]
            + x[3] * x[3] * x[7] * x[14]
            - x[0] * x[5] * x[7] * x[14]
            - x[1] * x[3] * x[8] * x[14]
            + x[0] * x[4] * x[8] * x[14]) / det;
    y[8] = (-x[4] * x[7] * x[10] * x[10]
            + x[2] * x[8] * x[10] * x[10]
            + x[4] * x[6] * x[10] * x[11]
            + x[3] * x[7] * x[10] * x[11]
            - 2 * x[1] * x[8] * x[10] * x[11]
            - x[3] * x[6] * x[11] * x[11]
            + x[0] * x[8] * x[11] * x[11]
            - x[2] * x[6] * x[10] * x[12]
            + x[1] * x[7] * x[10] * x[12]
            + x[1] * x[6] * x[11] * x[12]
            - x[0] * x[7] * x[11] * x[12]
            - x[2] * x[3] * x[10] * x[13]
            + x[1] * x[4] * x[10] * x[13]
            + x[1] * x[3] * x[11] * x[13]
            - x[0] * x[4] * x[11] * x[13]
            - x[1] * x[1] * x[12] * x[13]
            + x[0] * x[2] * x[12] * x[13]
            + x[2] * x[3] * x[6] * x[14]
            - x[1] * x[4] * x[6] * x[14]
            - x[1] * x[3] * x[7] * x[14]
            + x[0] * x[4] * x[7] * x[14]
            + x[1] * x[1] * x[8] * x[14]
            - x[0] * x[2] * x[8] * x[14]) / det;
    y[9] = (x[4] * x[4] * x[10] * x[10]
            - x[2] * x[5] * x[10] * x[10]
            - 2 * x[3] * x[4] * x[10] * x[11]
            + 2 * x[1] * x[5] * x[10] * x[11]
            + x[3] * x[3] * x[11] * x[11]
            - x[0] * x[5] * x[11] * x[11]
            + 2 * x[2] * x[3] * x[10] * x[12]
            - 2 * x[1] * x[4] * x[10] * x[12]
            - 2 * x[1] * x[3] * x[11] * x[12]
            + 2 * x[0] * x[4] * x[11] * x[12]
            + x[1] * x[1] * x[12] * x[12]
            - x[0] * x[2] * x[12] * x[12]
            - x[2] * x[3] * x[3] * x[14]
            + 2 * x[1] * x[3] * x[4] * x[14]
            - x[0] * x[4] * x[4] * x[14]
            - x[1] * x[1] * x[5] * x[14]
            + x[0] * x[2] * x[5] * x[14]) / det;
    y[10] = (x[5] * x[7] * x[7] * x[10]
             - 2 * x[4] * x[7] * x[8] * x[10]
             + x[2] * x[8] * x[8] * x[10]
             + x[4] * x[4] * x[9] * x[10]
             - x[2] * x[5] * x[9] * x[10]
             - x[5] * x[6] * x[7] * x[11]
             + x[4] * x[6] * x[8] * x[11]
             + x[3] * x[7] * x[8] * x[11]
             - x[1] * x[8] * x[8] * x[11]
             - x[3] * x[4] * x[9] * x[11]
             + x[1] * x[5] * x[9] * x[11]
             + x[4] * x[6] * x[7] * x[12]
             - x[3] * x[7] * x[7] * x[12]
             - x[2] * x[6] * x[8] * x[12]
             + x[1] * x[7] * x[8] * x[12]
             + x[2] * x[3] * x[9] * x[12]
             - x[1] * x[4] * x[9] * x[12]
             - x[4] * x[4] * x[6] * x[13]
             + x[2] * x[5] * x[6] * x[13]
             + x[3] * x[4] * x[7] * x[13]
             - x[1] * x[5] * x[7] * x[13]
             - x[2] * x[3] * x[8] * x[13]
             + x[1] * x[4] * x[8] * x[13]) / det;
    y[11] = (-x[5] * x[6] * x[7] * x[10]
             + x[4] * x[6] * x[8] * x[10]
             + x[3] * x[7] * x[8] * x[10]
             - x[1] * x[8] * x[8] * x[10]
             - x[3] * x[4] * x[9] * x[10]
             + x[1] * x[5] * x[9] * x[10]
             + x[5] * x[6] * x[6] * x[11]
             - 2 * x[3] * x[6] * x[8] * x[11]
             + x[0] * x[8] * x[8] * x[11]
             + x[3] * x[3] * x[9] * x[11]
             - x[0] * x[5] * x[9] * x[11]
             - x[4] * x[6] * x[6] * x[12]
             + x[3] * x[6] * x[7] * x[12]
             + x[1] * x[6] * x[8] * x[12]
             - x[0] * x[7] * x[8] * x[12]
             - x[1] * x[3] * x[9] * x[12]
             + x[0] * x[4] * x[9] * x[12]
             + x[3] * x[4] * x[6] * x[13]
             - x[1] * x[5] * x[6] * x[13]
             - x[3] * x[3] * x[7] * x[13]
             + x[0] * x[5] * x[7] * x[13]
             + x[1] * x[3] * x[8] * x[13]
             - x[0] * x[4] * x[8] * x[13]) / det;
    y[12] = (x[4] * x[6] * x[7] * x[10]
             - x[3] * x[7] * x[7] * x[10]
             - x[2] * x[6] * x[8] * x[10]
             + x[1] * x[7] * x[8] * x[10]
             + x[2] * x[3] * x[9] * x[10]
             - x[1] * x[4] * x[9] * x[10]
             - x[4] * x[6] * x[6] * x[11]
             + x[3] * x[6] * x[7] * x[11]
             + x[1] * x[6] * x[8] * x[11]
             - x[0] * x[7] * x[8] * x[11]
             - x[1] * x[3] * x[9] * x[11]
             + x[0] * x[4] * x[9] * x[11]
             + x[2] * x[6] * x[6] * x[12]
             - 2 * x[1] * x[6] * x[7] * x[12]
             + x[0] * x[7] * x[7] * x[12]
             + x[1] * x[1] * x[9] * x[12]
             - x[0] * x[2] * x[9] * x[12]
             - x[2] * x[3] * x[6] * x[13]
             + x[1] * x[4] * x[6] * x[13]
             + x[1] * x[3] * x[7] * x[13]
             - x[0] * x[4] * x[7] * x[13]
             - x[1] * x[1] * x[8] * x[13]
             + x[0] * x[2] * x[8] * x[13]) / det;
    y[13] = (-x[4] * x[4] * x[6] * x[10]
             + x[2] * x[5] * x[6] * x[10]
             + x[3] * x[4] * x[7] * x[10]
             - x[1] * x[5] * x[7] * x[10]
             - x[2] * x[3] * x[8] * x[10]
             + x[1] * x[4] * x[8] * x[10]
             + x[3] * x[4] * x[6] * x[11]
             - x[1] * x[5] * x[6] * x[11]
             - x[3] * x[3] * x[7] * x[11]
             + x[0] * x[5] * x[7] * x[11]
             + x[1] * x[3] * x[8] * x[11]
             - x[0] * x[4] * x[8] * x[11]
             - x[2] * x[3] * x[6] * x[12]
             + x[1] * x[4] * x[6] * x[12]
             + x[1] * x[3] * x[7] * x[12]
             - x[0] * x[4] * x[7] * x[12]
             - x[1] * x[1] * x[8] * x[12]
             + x[0] * x[2] * x[8] * x[12]
             + x[2] * x[3] * x[3] * x[13]
             - 2 * x[1] * x[3] * x[4] * x[13]
             + x[0] * x[4] * x[4] * x[13]
             + x[1] * x[1] * x[5] * x[13]
             - x[0] * x[2] * x[5] * x[13]) / det;
    y[14] = (x[4] * x[4] * x[6] * x[6]
             - x[2] * x[5] * x[6] * x[6]
             - 2 * x[3] * x[4] * x[6] * x[7]
             + 2 * x[1] * x[5] * x[6] * x[7]
             + x[3] * x[3] * x[7] * x[7]
             - x[0] * x[5] * x[7] * x[7]
             + 2 * x[2] * x[3] * x[6] * x[8]
             - 2 * x[1] * x[4] * x[6] * x[8]
             - 2 * x[1] * x[3] * x[7] * x[8]
             + 2 * x[0] * x[4] * x[7] * x[8]
             + x[1] * x[1] * x[8] * x[8]
             - x[0] * x[2] * x[8] * x[8]
             - x[2] * x[3] * x[3] * x[9]
             + 2 * x[1] * x[3] * x[4] * x[9]
             - x[0] * x[4] * x[4] * x[9]
             - x[1] * x[1] * x[5] * x[9]
             + x[0] * x[2] * x[5] * x[9]) / det;
    return det;
}

template <typename T>
T packed_kinetic_trace_5(
        const T *RESTRICT a, const T *RESTRICT b,
        const T *RESTRICT c, const T *RESTRICT m) noexcept {
    return a[0] * b[0] * c[0] * m[0]
           + a[1] * b[0] * c[1] * m[0]
           + a[0] * b[1] * c[1] * m[0]
           + a[1] * b[1] * c[2] * m[0]
           + a[3] * b[0] * c[3] * m[0]
           + a[0] * b[3] * c[3] * m[0]
           + a[3] * b[1] * c[4] * m[0]
           + a[1] * b[3] * c[4] * m[0]
           + a[3] * b[3] * c[5] * m[0]
           + a[6] * b[0] * c[6] * m[0]
           + a[0] * b[6] * c[6] * m[0]
           + a[6] * b[1] * c[7] * m[0]
           + a[1] * b[6] * c[7] * m[0]
           + a[6] * b[3] * c[8] * m[0]
           + a[3] * b[6] * c[8] * m[0]
           + a[6] * b[6] * c[9] * m[0]
           + a[10] * b[0] * c[10] * m[0]
           + a[0] * b[10] * c[10] * m[0]
           + a[10] * b[1] * c[11] * m[0]
           + a[1] * b[10] * c[11] * m[0]
           + a[10] * b[3] * c[12] * m[0]
           + a[3] * b[10] * c[12] * m[0]
           + a[10] * b[6] * c[13] * m[0]
           + a[6] * b[10] * c[13] * m[0]
           + a[10] * b[10] * c[14] * m[0]
           + a[1] * b[1] * c[0] * m[1]
           + a[2] * b[1] * c[1] * m[1]
           + a[1] * b[2] * c[1] * m[1]
           + a[2] * b[2] * c[2] * m[1]
           + a[4] * b[1] * c[3] * m[1]
           + a[1] * b[4] * c[3] * m[1]
           + a[4] * b[2] * c[4] * m[1]
           + a[2] * b[4] * c[4] * m[1]
           + a[4] * b[4] * c[5] * m[1]
           + a[7] * b[1] * c[6] * m[1]
           + a[1] * b[7] * c[6] * m[1]
           + a[7] * b[2] * c[7] * m[1]
           + a[2] * b[7] * c[7] * m[1]
           + a[7] * b[4] * c[8] * m[1]
           + a[4] * b[7] * c[8] * m[1]
           + a[7] * b[7] * c[9] * m[1]
           + a[11] * b[1] * c[10] * m[1]
           + a[1] * b[11] * c[10] * m[1]
           + a[11] * b[2] * c[11] * m[1]
           + a[2] * b[11] * c[11] * m[1]
           + a[11] * b[4] * c[12] * m[1]
           + a[4] * b[11] * c[12] * m[1]
           + a[11] * b[7] * c[13] * m[1]
           + a[7] * b[11] * c[13] * m[1]
           + a[11] * b[11] * c[14] * m[1]
           + a[3] * b[3] * c[0] * m[2]
           + a[4] * b[3] * c[1] * m[2]
           + a[3] * b[4] * c[1] * m[2]
           + a[4] * b[4] * c[2] * m[2]
           + a[5] * b[3] * c[3] * m[2]
           + a[3] * b[5] * c[3] * m[2]
           + a[5] * b[4] * c[4] * m[2]
           + a[4] * b[5] * c[4] * m[2]
           + a[5] * b[5] * c[5] * m[2]
           + a[8] * b[3] * c[6] * m[2]
           + a[3] * b[8] * c[6] * m[2]
           + a[8] * b[4] * c[7] * m[2]
           + a[4] * b[8] * c[7] * m[2]
           + a[8] * b[5] * c[8] * m[2]
           + a[5] * b[8] * c[8] * m[2]
           + a[8] * b[8] * c[9] * m[2]
           + a[12] * b[3] * c[10] * m[2]
           + a[3] * b[12] * c[10] * m[2]
           + a[12] * b[4] * c[11] * m[2]
           + a[4] * b[12] * c[11] * m[2]
           + a[12] * b[5] * c[12] * m[2]
           + a[5] * b[12] * c[12] * m[2]
           + a[12] * b[8] * c[13] * m[2]
           + a[8] * b[12] * c[13] * m[2]
           + a[12] * b[12] * c[14] * m[2]
           + a[6] * b[6] * c[0] * m[3]
           + a[7] * b[6] * c[1] * m[3]
           + a[6] * b[7] * c[1] * m[3]
           + a[7] * b[7] * c[2] * m[3]
           + a[8] * b[6] * c[3] * m[3]
           + a[6] * b[8] * c[3] * m[3]
           + a[8] * b[7] * c[4] * m[3]
           + a[7] * b[8] * c[4] * m[3]
           + a[8] * b[8] * c[5] * m[3]
           + a[9] * b[6] * c[6] * m[3]
           + a[6] * b[9] * c[6] * m[3]
           + a[9] * b[7] * c[7] * m[3]
           + a[7] * b[9] * c[7] * m[3]
           + a[9] * b[8] * c[8] * m[3]
           + a[8] * b[9] * c[8] * m[3]
           + a[9] * b[9] * c[9] * m[3]
           + a[13] * b[6] * c[10] * m[3]
           + a[6] * b[13] * c[10] * m[3]
           + a[13] * b[7] * c[11] * m[3]
           + a[7] * b[13] * c[11] * m[3]
           + a[13] * b[8] * c[12] * m[3]
           + a[8] * b[13] * c[12] * m[3]
           + a[13] * b[9] * c[13] * m[3]
           + a[9] * b[13] * c[13] * m[3]
           + a[13] * b[13] * c[14] * m[3]
           + a[10] * b[10] * c[0] * m[4]
           + a[11] * b[10] * c[1] * m[4]
           + a[10] * b[11] * c[1] * m[4]
           + a[11] * b[11] * c[2] * m[4]
           + a[12] * b[10] * c[3] * m[4]
           + a[10] * b[12] * c[3] * m[4]
           + a[12] * b[11] * c[4] * m[4]
           + a[11] * b[12] * c[4] * m[4]
           + a[12] * b[12] * c[5] * m[4]
           + a[13] * b[10] * c[6] * m[4]
           + a[10] * b[13] * c[6] * m[4]
           + a[13] * b[11] * c[7] * m[4]
           + a[11] * b[13] * c[7] * m[4]
           + a[13] * b[12] * c[8] * m[4]
           + a[12] * b[13] * c[8] * m[4]
           + a[13] * b[13] * c[9] * m[4]
           + a[14] * b[10] * c[10] * m[4]
           + a[10] * b[14] * c[10] * m[4]
           + a[14] * b[11] * c[11] * m[4]
           + a[11] * b[14] * c[11] * m[4]
           + a[14] * b[12] * c[12] * m[4]
           + a[12] * b[14] * c[12] * m[4]
           + a[14] * b[13] * c[13] * m[4]
           + a[13] * b[14] * c[13] * m[4]
           + a[14] * b[14] * c[14] * m[4];
}

template <typename T>
T packed_quadratic_form_5(
        const T *RESTRICT x, const T *RESTRICT v) noexcept {
    return v[0] * v[0] * x[0]
           + 2 * v[0] * v[1] * x[1]
           + v[1] * v[1] * x[2]
           + 2 * v[0] * v[2] * x[3]
           + 2 * v[1] * v[2] * x[4]
           + v[2] * v[2] * x[5]
           + 2 * v[0] * v[3] * x[6]
           + 2 * v[1] * v[3] * x[7]
           + 2 * v[2] * v[3] * x[8]
           + v[3] * v[3] * x[9]
           + 2 * v[0] * v[4] * x[10]
           + 2 * v[1] * v[4] * x[11]
           + 2 * v[2] * v[4] * x[12]
           + 2 * v[3] * v[4] * x[13]
           + v[4] * v[4] * x[14];
}

template <typename T>
void packed_permutation_conjugate_5(
        const T *RESTRICT x, const T *RESTRICT p,
        T *RESTRICT y) noexcept {
    y[0] = p[0] * p[0] * x[0]
           + 2 * p[0] * p[1] * x[1]
           + p[1] * p[1] * x[2]
           + 2 * p[0] * p[2] * x[3]
           + 2 * p[1] * p[2] * x[4]
           + p[2] * p[2] * x[5]
           + 2 * p[0] * p[3] * x[6]
           + 2 * p[1] * p[3] * x[7]
           + 2 * p[2] * p[3] * x[8]
           + p[3] * p[3] * x[9]
           + 2 * p[0] * p[4] * x[10]
           + 2 * p[1] * p[4] * x[11]
           + 2 * p[2] * p[4] * x[12]
           + 2 * p[3] * p[4] * x[13]
           + p[4] * p[4] * x[14];
    y[1] = p[0] * p[5] * x[0]
           + p[1] * p[5] * x[1]
           + p[0] * p[6] * x[1]
           + p[1] * p[6] * x[2]
           + p[2] * p[5] * x[3]
           + p[0] * p[7] * x[3]
           + p[2] * p[6] * x[4]
           + p[1] * p[7] * x[4]
           + p[2] * p[7] * x[5]
           + p[3] * p[5] * x[6]
           + p[0] * p[8] * x[6]
           + p[3] * p[6] * x[7]
           + p[1] * p[8] * x[7]
           + p[3] * p[7] * x[8]
           + p[2] * p[8] * x[8]
           + p[3] * p[8] * x[9]
           + p[4] * p[5] * x[10]
           + p[0] * p[9] * x[10]
           + p[4] * p[6] * x[11]
           + p[1] * p[9] * x[11]
           + p[4] * p[7] * x[12]
           + p[2] * p[9] * x[12]
           + p[4] * p[8] * x[13]
           + p[3] * p[9] * x[13]
           + p[4] * p[9] * x[14];
    y[2] = p[5] * p[5] * x[0]
           + 2 * p[5] * p[6] * x[1]
           + p[6] * p[6] * x[2]
           + 2 * p[5] * p[7] * x[3]
           + 2 * p[6] * p[7] * x[4]
           + p[7] * p[7] * x[5]
           + 2 * p[5] * p[8] * x[6]
           + 2 * p[6] * p[8] * x[7]
           + 2 * p[7] * p[8] * x[8]
           + p[8] * p[8] * x[9]
           + 2 * p[5] * p[9] * x[10]
           + 2 * p[6] * p[9] * x[11]
           + 2 * p[7] * p[9] * x[12]
           + 2 * p[8] * p[9] * x[13]
           + p[9] * p[9] * x[14];
    y[3] = p[0] * p[10] * x[0]
           + p[1] * p[10] * x[1]
           + p[0] * p[11] * x[1]
           + p[1] * p[11] * x[2]
           + p[2] * p[10] * x[3]
           + p[0] * p[12] * x[3]
           + p[2] * p[11] * x[4]
           + p[1] * p[12] * x[4]
           + p[2] * p[12] * x[5]
           + p[3] * p[10] * x[6]
           + p[0] * p[13] * x[6]
           + p[3] * p[11] * x[7]
           + p[1] * p[13] * x[7]
           + p[3] * p[12] * x[8]
           + p[2] * p[13] * x[8]
           + p[3] * p[13] * x[9]
           + p[4] * p[10] * x[10]
           + p[0] * p[14] * x[10]
           + p[4] * p[11] * x[11]
           + p[1] * p[14] * x[11]
           + p[4] * p[12] * x[12]
           + p[2] * p[14] * x[12]
           + p[4] * p[13] * x[13]
           + p[3] * p[14] * x[13]
           + p[4] * p[14] * x[14];
    y[4] = p[5] * p[10] * x[0]
           + p[6] * p[10] * x[1]
           + p[5] * p[11] * x[1]
           + p[6] * p[11] * x[2]
           + p[7] * p[10] * x[3]
           + p[5] * p[12] * x[3]
           + p[7] * p[11] * x[4]
           + p[6] * p[12] * x[4]
           + p[7] * p[12] * x[5]
           + p[8] * p[10] * x[6]
           + p[5] * p[13] * x[6]
           + p[8] * p[11] * x[7]
           + p[6] * p[13] * x[7]
           + p[8] * p[12] * x[8]
           + p[7] * p[13] * x[8]
           + p[8] * p[13] * x[9]
           + p[9] * p[10] * x[10]
           + p[5] * p[14] * x[10]
           + p[9] * p[11] * x[11]
           + p[6] * p[14] * x[11]
           + p[9] * p[12] * x[12]
           + p[7] * p[14] * x[12]
           + p[9] * p[13] * x[13]
           + p[8] * p[14] * x[13]
           + p[9] * p[14] * x[14];
    y[5] = p[10] * p[10] * x[0]
           + 2 * p[10] * p[11] * x[1]
           + p[11] * p[11] * x[2]
           + 2 * p[10] * p[12] * x[3]
           + 2 * p[11] * p[12] * x[4]
           + p[12] * p[12] * x[5]
           + 2 * p[10] * p[13] * x[6]
           + 2 * p[11] * p[13] * x[7]
           + 2 * p[12] * p[13] * x[8]
           + p[13] * p[13] * x[9]
           + 2 * p[10] * p[14] * x[10]
           + 2 * p[11] * p[14] * x[11]
           + 2 * p[12] * p[14] * x[12]
           + 2 * p[13] * p[14] * x[13]
           + p[14] * p[14] * x[14];
    y[6] = p[0] * p[15] * x[0]
           + p[1] * p[15] * x[1]
           + p[0] * p[16] * x[1]
           + p[1] * p[16] * x[2]
           + p[2] * p[15] * x[3]
           + p[0] * p[17] * x[3]
           + p[2] * p[16] * x[4]
           + p[1] * p[17] * x[4]
           + p[2] * p[17] * x[5]
           + p[3] * p[15] * x[6]
           + p[0] * p[18] * x[6]
           + p[3] * p[16] * x[7]
           + p[1] * p[18] * x[7]
           + p[3] * p[17] * x[8]
           + p[2] * p[18] * x[8]
           + p[3] * p[18] * x[9]
           + p[4] * p[15] * x[10]
           + p[0] * p[19] * x[10]
           + p[4] * p[16] * x[11]
           + p[1] * p[19] * x[11]
           + p[4] * p[17] * x[12]
           + p[2] * p[19] * x[12]
           + p[4] * p[18] * x[13]
           + p[3] * p[19] * x[13]
           + p[4] * p[19] * x[14];
    y[7] = p[5] * p[15] * x[0]
           + p[6] * p[15] * x[1]
           + p[5] * p[16] * x[1]
           + p[6] * p[16] * x[2]
           + p[7] * p[15] * x[3]
           + p[5] * p[17] * x[3]
           + p[7] * p[16] * x[4]
           + p[6] * p[17] * x[4]
           + p[7] * p[17] * x[5]
           + p[8] * p[15] * x[6]
           + p[5] * p[18] * x[6]
           + p[8] * p[16] * x[7]
           + p[6] * p[18] * x[7]
           + p[8] * p[17] * x[8]
           + p[7] * p[18] * x[8]
           + p[8] * p[18] * x[9]
           + p[9] * p[15] * x[10]
           + p[5] * p[19] * x[10]
           + p[9] * p[16] * x[11]
           + p[6] * p[19] * x[11]
           + p[9] * p[17] * x[12]
           + p[7] * p[19] * x[12]
           + p[9] * p[18] * x[13]
           + p[8] * p[19] * x[13]
           + p[9] * p[19] * x[14];
    y[8] = p[10] * p[15] * x[0]
           + p[11] * p[15] * x[1]
           + p[10] * p[16] * x[1]
           + p[11] * p[16] * x[2]
           + p[12] * p[15] * x[3]
           + p[10] * p[17] * x[3]
           + p[12] * p[16] * x[4]
           + p[11] * p[17] * x[4]
           + p[12] * p[17] * x[5]
           + p[13] * p[15] * x[6]
           + p[10] * p[18] * x[6]
           + p[13] * p[16] * x[7]
           + p[11] * p[18] * x[7]
           + p[13] * p[17] * x[8]
           + p[12] * p[18] * x[8]
           + p[13] * p[18] * x[9]
           + p[14] * p[15] * x[10]
           + p[10] * p[19] * x[10]
           + p[14] * p[16] * x[11]
           + p[11] * p[19] * x[11]
           + p[14] * p[17] * x[12]
           + p[12] * p[19] * x[12]
           + p[14] * p[18] * x[13]
           + p[13] * p[19] * x[13]
           + p[14] * p[19] * x[14];
    y[9] = p[15] * p[15] * x[0]
           + 2 * p[15] * p[16] * x[1]
           + p[16] * p[16] * x[2]
           + 2 * p[15] * p[17] * x[3]
           + 2 * p[16] * p[17] * x[4]
           + p[17] * p[17] * x[5]
           + 2 * p[15] * p[18] * x[6]
           + 2 * p[16] * p[18] * x[7]
           + 2 * p[17] * p[18] * x[8]
           + p[18] * p[18] * x[9]
           + 2 * p[15] * p[19] * x[10]
           + 2 * p[16] * p[19] * x[11]
           + 2 * p[17] * p[19] * x[12]
           + 2 * p[18] * p[19] * x[13]
           + p[19] * p[19] * x[14];
    y[10] = p[0] * p[20] * x[0]
            + p[1] * p[20] * x[1]
            + p[0] * p[21] * x[1]
            + p[1] * p[21] * x[2]
            + p[2] * p[20] * x[3]
            + p[0] * p[22] * x[3]
            + p[2] * p[21] * x[4]
            + p[1] * p[22] * x[4]
            + p[2] * p[22] * x[5]
            + p[3] * p[20] * x[6]
            + p[0] * p[23] * x[6]
            + p[3] * p[21] * x[7]
            + p[1] * p[23] * x[7]
            + p[3] * p[22] * x[8]
            + p[2] * p[23] * x[8]
            + p[3] * p[23] * x[9]
            + p[4] * p[20] * x[10]
            + p[0] * p[24] * x[10]
            + p[4] * p[21] * x[11]
            + p[1] * p[24] * x[11]
            + p[4] * p[22] * x[12]
            + p[2] * p[24] * x[12]
            + p[4] * p[23] * x[13]
            + p[3] * p[24] * x[13]
            + p[4] * p[24] * x[14];
    y[11] = p[5] * p[20] * x[0]
            + p[6] * p[20] * x[1]
            + p[5] * p[21] * x[1]
            + p[6] * p[21] * x[2]
            + p[7] * p[20] * x[3]
            + p[5] * p[22] * x[3]
            + p[7] * p[21] * x[4]
            + p[6] * p[22] * x[4]
            + p[7] * p[22] * x[5]
            + p[8] * p[20] * x[6]
            + p[5] * p[23] * x[6]
            + p[8] * p[21] * x[7]
            + p[6] * p[23] * x[7]
            + p[8] * p[22] * x[8]
            + p[7] * p[23] * x[8]
            + p[8] * p[23] * x[9]
            + p[9] * p[20] * x[10]
            + p[5] * p[24] * x[10]
            + p[9] * p[21] * x[11]
            + p[6] * p[24] * x[11]
            + p[9] * p[22] * x[12]
            + p[7] * p[24] * x[12]
            + p[9] * p[23] * x[13]
            + p[8] * p[24] * x[13]
            + p[9] * p[24] * x[14];
    y[12] = p[10] * p[20] * x[0]
            + p[11] * p[20] * x[1]
            + p[10] * p[21] * x[1]
            + p[11] * p[21] * x[2]
            + p[12] * p[20] * x[3]
            + p[10] * p[22] * x[3]
            + p[12] * p[21] * x[4]
            + p[11] * p[22] * x[4]
            + p[12] * p[22] * x[5]
            + p[13] * p[20] * x[6]
            + p[10] * p[23] * x[6]
            + p[13] * p[21] * x[7]
            + p[11] * p[23] * x[7]
            + p[13] * p[22] * x[8]
            + p[12] * p[23] * x[8]
            + p[13] * p[23] * x[9]
            + p[14] * p[20] * x[10]
            + p[10] * p[24] * x[10]
            + p[14] * p[21] * x[11]
            + p[11] * p[24] * x[11]
            + p[14] * p[22] * x[12]
            + p[12] * p[24] * x[12]
            + p[14] * p[23] * x[13]
            + p[13] * p[24] * x[13]
            + p[14] * p[24] * x[14];
    y[13] = p[15] * p[20] * x[0]
            + p[16] * p[20] * x[1]
            + p[15] * p[21] * x[1]
            + p[16] * p[21] * x[2]
            + p[17] * p[20] * x[3]
            + p[15] * p[22] * x[3]
            + p[17] * p[21] * x[4]
            + p[16] * p[22] * x[4]
            + p[17] * p[22] * x[5]
            + p[18] * p[20] * x[6]
            + p[15] * p[23] * x[6]
            + p[18] * p[21] * x[7]
            + p[16] * p[23] * x[7]
            + p[18] * p[22] * x[8]
            + p[17] * p[23] * x[8]
            + p[18] * p[23] * x[9]
            + p[19] * p[20] * x[10]
            + p[15] * p[24] * x[10]
            + p[19] * p[21] * x[11]
            + p[16] * p[24] * x[11]
            + p[19] * p[22] * x[12]
            + p[17] * p[24] * x[12]
            + p[19] * p[23] * x[13]
            + p[18] * p[24] * x[13]
            + p[19] * p[24] * x[14];
    y[14] = p[20] * p[20] * x[0]
            + 2 * p[20] * p[21] * x[1]
            + p[21] * p[21] * x[2]
            + 2 * p[20] * p[22] * x[3]
            + 2 * p[21] * p[22] * x[4]
            + p[22] * p[22] * x[5]
            + 2 * p[20] * p[23] * x[6]
            + 2 * p[21] * p[23] * x[7]
            + 2 * p[22] * p[23] * x[8]
            + p[23] * p[23] * x[9]
            + 2 * p[20] * p[24] * x[10]
            + 2 * p[21] * p[24] * x[11]
            + 2 * p[22] * p[24] * x[12]
            + 2 * p[23] * p[24] * x[13]
            + p[24] * p[24] * x[14];
}

#endif // ZSVM_PACKED_LINEAR_ALGEBRA_IMPL_HPP
